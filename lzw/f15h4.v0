	       P R E L I M I N A R Y    S P E C I F I C A T I O N


					  Due 2:00 AM, Friday, 06 November 2015

CPSC 323   Homework #4   An Ounce of Compression
										
(60 points) Write file compression and decompression filters:

      encode [-m MAXBITS | -o NAME | -i NAME | -p USED]*
										
      decode [-o NAME]*

encode reads a stream of characters from the standard input, compresses it
using the Lempel-Ziv-Welch algorithm, and writes the stream of codes to the
standard output as a stream of bits packed into 8-bit bytes.  decode reads
from the standard input a byte stream written by encode, decompresses the
stream of codes, and writes the stream of characters to the standard output.

encode and decode are a single program (i.e., they are hard links to the same
inode) whose behavior is determined by the name under which it is invoked
(i.e., the 0-th command-line argument).  The -m, -o, -i, and -p options may
appear in any order and any number of times, with the last occurrence
superseding any earlier ones.

encode writes codes using the smallest number of bits required to specify valid
codes at the time (e.g., 9 bits when there are 512 valid codes, but 10 bits
once the next code is assigned), up to a maximum of 12 bits (or MAXBITS if the
-m flag is specified).  In effect, this limit determines the maximum size of
the string table.

With the -o NAME option, the final string table (without usage counts) is
dumped (in some reasonably compact format) to the file NAME after stdin is
processed.

With the -i NAME option, the initial string table is read from the file NAME
(which must have been written during a previous execution of encode or decode)
rather than consisting of only the one-character strings.

When all possible codes have been assigned, the default is to stop assigning
codes.  However, with the -p (pruning) option, encode and decode instead create
a new string table containing

* every one-character string;

* every string that was found at least USED times (i.e., encountered during
  encode's greedy search or decode's printing of the string)

* every nonempty prefix of a string in the table.

Here USED must be positive and the use counts should be reset to 0 each time
the table is pruned.  Note that the new codes assigned may differ from the old
ones for the same strings.

Use the submit command to turn in your log file and the source files for
encode/decode (including a Makefile) as assignment 4.

YOU MUST SUBMIT YOUR FILES (INCLUDING THE LOG FILE) AT THE END OF ANY SESSION
WHERE YOU HAVE SPENT AT LEAST ONE HOUR WRITING OR DEBUGGING CODE, AND AT LEAST
ONCE EVERY HOUR DURING LONGER SESSIONS.  (All submissions are retained.)


Notes
~~~~~
1. encode and decode should write a one-line message to stderr and exit when an
   invalid option is specified; when file NAME cannot be read/written; or when
   MAXBITS or USED is not a positive, decimal integer (without a leading +) or
   is too large to store in a long (see strtol()).  decode should also write an
   error message if it detects a file that encode could not have generated.

2. If MAXBITS <= 8 (= CHAR_BIT in <limits.h>) or MAXBITS > 20 (= 3*CHAR_BIT-4),
   then encode replaces MAXBITS by 12.

3. The -m, -i, and -p options are omitted for decode since this is more
   convenient for the user.  (What would happen if you forgot the value of
   MAXBITS for a particular compressed file?)  Thus this information must be
   represented in the output from encode.  For example, to represent MAXBITS:

   a. The first byte could contain the maximum code size.

   b. A special code (e.g., 0 or 111...111) could be used to indicate when
      the code size should be increased.

   Or you could use both.  This flexibility in the compressed form must be
   documented in your program.

4. As discussed in class, the string table consists of (CODE, PREFIX, CHAR)
   triples.  Decode must find PREFIX and CHAR given the CODE for a nonempty
   string, which is implemented most easily using an array of structs.  On the
   other hand, encode must find CODE given the pair (PREFIX, CHAR).  Since
   linear search would be prohibitively expensive, it uses a more elaborate
   data structure--hashing with chaining.  One possible hash function is

      HASH(p, k) = (((unsigned)(p) << CHAR_BIT) ^ ((unsigned) (k))) % SIZE

   where SIZE is the size of the table.  Note:  SIZE must be odd to ensure good
   performance, but may be fixed independent of MAXBITS as long as it is large
   enough to ensure reasonably fast searches for the range of table sizes
   allowed.  /usr/games/primes may be used to generate possible sizes.

   Since decode needs only the array and encode needs only the hash table, you
   could maintain separate data structures.  Indeed, without the -o option,
   only one of these structures is actually needed (the hash table when running
   as encode, the array when running as decode).  However, there is a certain
   economy in implementing one data structure that overlays both array and hash
   table access to the same set of triples.

5. When pruning you must assign new codes.  Otherwise even if the number of
   valid codes in the table were reduced significantly, the number of bits
   needed to send a code might not be.  (For example, suppose that code 4000 is
   kept, but there are only 400 codes in the table.  Then you would need 12
   bits to send 4000, but you would need only 9 bits if you renumbered.)

   Moreover, after pruning the last code sent/received may no longer be valid,
   so you may have (want) to skip adding the new (PREF,CHAR) pair to the table.

6. encode should handle both text and binary files (i.e., stdin may contain any
   of the 256 possible byte values, including the null character '\0').

7. encode and decode should be relatively bombproof.  However, they may assume
   that malloc() and realloc() will never fail.

8. Your solution may incorporate any of the following files:

     Hwk4/code.o    Object file for putBits() and getBits()
     Hwk4/code.h    Header file defining putBits() and getBits()
     Hwk4/code1.c   Stage 1 version of putBits() and getBits() (see Hint #1)
     Hwk4/code2.c   Stage 2 version of putBits() and getBits() (see Hint #1)

   However, unless you modify these files, your Makefile and sources must
   reference the originals; e.g.,

     #include "/c/cs323/Hwk4/code.h"

   rather than

     #include "code.h"

   (Note that you can switch between code.o, code1.o, and code2.o just by
   changing your Makefile.)

   When the environment variable DBG1, DBG2, or DBG is set, Hwk4/encode and
   Hwk4/decode use the code1.o, code2.o, or code.o version of putBits() and
   getBits() and dump the table to the file DBG.encode or DBG.decode.  You may
   find this useful when debugging.

9. Do NOT use the pow() function; use the shift operator << instead.

A. The degree of LZW compression (that is, the length of the output from
   encode) depends on the file, the command-line arguments and how they are
   represented, and the number of special codes (e.g., EMPTY, INCR_NBITS,
   PRUNE).  Indeed, the compressed file can be larger than the original in some
   cases.  Thus all tests of size will be in comparison with that given by
   Hwk4/encode (which the scripts assume is a correct implementation of LZW)
   and will be relatively loose.

B. Greedy parsing starts with the first character of what remains of the input
   stream and looks at longer and longer prefixes until it finds one that is
   not in the string table (and then sends the code for the previous prefix and
   adds the unfound prefix to the table).  Since these are the only prefixes
   looked up in the table, they are the only ones whose use counts are changed
   by the greedy parse.  For example, for the input ababc...,

     Parse #1:  a  found;  ab  not found
     Parse #2:  b  found;  ba  not found
     Parse #3:  a  found;  ab  found;  abc not found
     Parse #4:  c  found;  ...

   Thus a appeared 2 times, b 1 time, c 1 time, ab 1 times, ba 0 times, abc 0
   times, etc.

C. If you prune the table immediately after using the last empty slot, then
   everything works.  However, if you wait until the next insertion is in
   progress, then the situation may get complicated if the prefix of the code
   to be inserted is no longer in the table.  Thus you may prune either:

   * as soon as the last empty slot is taken; or

   * when there is no room for the latest code, in which case you may either
     not insert this code or insert it only if its prefix was not pruned.

D. The phrase "reasonably compact" means using at most 8 bytes per code.

E. The following capabilities will be worth at most the number of points shown
   below (these values include some tests that require both functionalities):

   * (20 points) increasing the code size from 9 to MAXBITS bits (vs. always
     using MAXBITS bits)

   * (15 points) implementing the -p USED option

   * (12 points) handling binary files

   * (10 points) implementing the -i and -o options (at most 5 points will
     require that the representation is compact)

   You may find it easier to implement encode/decode initially without them
   and then add them later one at a time.

F. The assignment is called lzw, so the test script will be invoked as

     % /c/cs323/Hwk4/test.lzw

   or as

     % /c/cs323/bin/testit 4 lzw




Hints on Encode/Decode
~~~~~~~~~~~~~~~~~~~~~~
1. It is MUCH easier to write the core of encode/decode in three stages:

   Stage 1:  The size of the string table is fixed at 2^MAXBITS; encode outputs
     the codes as ASCII integers, one per line (e.g., using printf()), and
     decode inputs the codes in the same format; the number of bits per code
     is ignored [see Hwk4/code1.c].

   Stage 2: As more strings are added, the size of the string table grows from
     2^9 to 2^MAXBITS; encode outputs the codes in the form NBITS:CODE, where
     NBITS and CODE are ASCII integers (e.g., 10:666), and decode inputs the
     codes in the same format, checking that the number of bits expected agrees
     with NBITS [see Hwk4/code2.c].

   Stage 3: encode outputs the codes as a stream of bits, packed into chars,
     and decode inputs the codes in the same format.

   (You may also want to start with Stage 0, where MAXBITS is fixed at 9 and
   linear search replaces hashing with chaining.)

   Since the "compressed" data is human-readable in Stages 1 and 2, they are
   easier to debug.  Moreover, the first part of the test script will not
   check the size of the output from encode so that the code from these stages
   should be able to pass all such tests.

2. While the pseudo-code for decode uses a stack to output the string of
   characters corresponding to a given code, it may be easier to use a
   recursive function instead.

3. Use int's rather than char's to hold character values, at least initially.
   The increase in storage is minor, but experience suggests that the savings
   in debugging time can be major.

4. Since compression followed by decompression should reproduce the original,
   the acid test for encode/decode is that

	% encode < FILE | decode | cmp - FILE

   does not produce output for any file FILE.  In this command

   * encode reads bytes from FILE and compresses them into a sequence of codes
     (that are written to its standard output);

   * decode reads this sequence of codes and decompresses them into a sequence
     of bytes (that are written to its standard output); and

   * cmp reads this sequence of bytes and compares it to the contents of FILE,
     printing a message only if it finds a discrepancy (shorter, longer, or
     at least one character different).

   "od -bc" and "cat -v -e -t" are two other useful commands for looking at
   files.

5. The primary difference between text files and binary files is that the
   latter usually contain NUL characters (i.e., '\0').  Thus if your code works
   on text files but not on binary files, you know where to start looking.

6. It may be helpful to write scaffolding code to:

   * Dump to a file the contents of the string table, with each line containing
     a code, the corresponding (PREF,CHAR) pair, the use count, and the string
     (written as a sequence of integers, not chars, so that they are visible)
     to which it corresponds.  You can use this function to compare the tables
     produced by encode and decode, or (by omitting the code, PREF, and CHAR
     and then sorting) to compare which strings are in the table before and
     after pruning.  Note that this format stresses readability rather than
     compactness, which is necessary when writing the final string table to a
     file under the -o option.

   * Verify that the table is consistent; for example, in each (PREF, CHAR)
     pair, CHAR is a valid character and PREF is a valid code (or some other
     special value).

   * After inserting something in the hash table, search() for it immediately
     (i.e., from within the insert() function) to verify that it can be found
     where you inserted it.

   * Monitor the average search time (= the ratio of the total number of hash
     cells visited within the search() function divided by the number of calls
     to the search() function) and verify that it never gets too large.  Hint:
     Use assert() or a conditional fprintf(stderr,...) so as not to affect the
     normal standard output.

7. The notes above give two schemes for keeping encode and decode synchronized
   with respect to the number of bits per code (= NBITS).  The second adds a
   few extra codes to the output (e.g., one for each increase in NBITS), but
   makes it easier for decode to recognize when to change NBITS.  Then again
   you could use both schemes.
								CS-323-10/14/15
                      The Lempel-Ziv-Welch Algorithm

Notation

  Each string W in the table is represented by a pair (C,K), where K is the
  last character in W and C is the location in the table of the prefix of W
  that contains all but the last character.  By convention, the null string is
  at location EMPTY; and the components of the pair in location I are denoted
  by PREF(I) and CHAR(I).


Compression

  Initialize the string table to contain the pair (EMPTY,K) for each char K

  C = EMPTY
  While ((K = getchar()) != EOF)
     If the pair (C,K) is in the table
     Then
	Set C = index of the pair (C,K) in the table
     Else
	Output code C
	Insert the pair (C,K) into the table
	Set C = index of the pair (EMPTY,K) in the table

  Output code C (if C != EMPTY)


Decompression

  Initialize the string table to contain the pair (EMPTY,K) for each char K

  oldC = EMPTY
  While ((newC = C = getcode()) != EOF)
     If C is an unknown code
     Then
	Push finalK onto Kstack
	C = oldC

     While PREF(C) != EMPTY
	Push CHAR(C) onto Kstack
	C = PREF(C)

     finalK = CHAR(C)
     putchar(finalK)

     While Kstack is nonempty
	Pop K off Kstack
	putchar(K)

     If oldC is not EMPTY
	Insert the pair (oldC,finalK) into the table
     oldC = newC


Example (with EMPTY = 0)

  Message:      a  b  a  b  c  b  a  b  a  b  a  a  a  a  a  a  a  ...
  Encoding:     1  2     4  3     5        8  1    10       11     ...

  String Table:
    C PREF CHAR String    C PREF CHAR String    C PREF CHAR String    ...
    1   0    a   a        5   2    a   ba       9   8    a   baba
    2   0    b   b        6   4    c   abc     10   1    a   aa
    3   0    c   c        7   3    b   cb      11  10    a   aaa
    4   1    b   ab       8   5    b   bab     12  11    a   aaaa

								CS-323-09/22/04
